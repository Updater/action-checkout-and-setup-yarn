---
name: 'Checkout and Set Up Yarn'

description: 'Check out the repo, set up Node and Yarn with private registry support, and then install dependencies using Yarn.'

inputs:
  auth-token:
    description: 'Token for authenticating with GitHub Package Registry'
    required: true
  fetch-depth:
    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'
    required: false
  ref:
    description: 'Github Checkout action ref'
    required: false
    default: ${{ github.event.pull_request.head.ref }}
  github-package-registry-scope:
    description: 'Package scope to point at GitHub Package Registry. (Defaults to owner of repository where action is being used)'
    default: ''
  node-version:
    description: 'Node version to force usage of. (Defaults to value found in .tool-versions, .node-version, .nvmrc, or "16"'
    required: false
    default: ''
  token:
    description: 'GH_TOKEN to use if not using the default'
    required: false
    default: "${{ github.token }}"
  node-modules-path:
    description: 'Other paths to cache based on the yarn lockfile'
    required: false
    default: 'node_modules'
  node-modules-cache-version:
    description: 'The version of the cache to use. Mostly used if you need to cache bust'
    required: false
    default: 'v1'
  cache-node-modules:
    description: 'If node modules caching should be done'
    required: false
    default: 'true'

runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: ${{ inputs.fetch-depth }}
        token: ${{ inputs.token }}
        lfs: true

    - name: Get node version
      id: node-version
      shell: bash
      run: |
        if [ "${{ inputs.node-version }}" != "" ]; then
          NODE_VERSION=${{ inputs.node-version }}
        elif [ -f .tool-versions ]; then
          NODE_VERSION=$(cat .tool-versions | grep nodejs | cut -d' ' -f2)
        elif [ -f .node-version ]; then
          NODE_VERSION=$(cat .node-version | tr -d 'v')
        elif [ -f .nvmrc ]; then
          NODE_VERSION=$(cat .nvmrc | tr -d 'v')
        else
          NODE_VERSION="lts/*"
        fi
        echo "::set-output name=node-version::${NODE_VERSION}"

    - uses: actions/setup-node@v4
      with:
        node-version: ${{ steps.node-version.outputs.node-version }}

